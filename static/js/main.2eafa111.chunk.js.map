{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","task","id","Date","now","value","isDone","this","push","setState","updatelist","filter","item","input","className","type","placeholder","required","onChange","e","updateInput","target","onKeyPress","which","addToDo","map","key","onClick","deleteToDo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAyEeA,G,wDArEX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,QAAS,GACTC,KAAM,IAJI,E,oDAQVC,GACL,GAAY,KAATA,EAAY,CACX,IAAMF,EAAU,CACZG,GAAIC,KAAKC,MACTC,MAAOJ,EACPK,QAAQ,GAGLN,EAAI,YAAOO,KAAKT,MAAME,MAC5BA,EAAKQ,KAAKT,GAEVQ,KAAKE,SAAS,CACVT,OACAD,QAAS,Q,iCAKVG,GACP,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACJW,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KACnDK,KAAKE,SAAS,CACVT,KAAMU,M,kCAIFG,GACRN,KAAKE,SAAS,CACVV,QAASc,M,+BAIR,IAAD,OACJ,OACI,6BACI,yBAAKC,UAAU,aACX,0CACA,2BAAOZ,GAAG,MAAMa,KAAK,OAAOC,YAAY,eACpCC,UAAQ,EACRZ,MAAOE,KAAKT,MAAMC,QAClBmB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOhB,QACzCiB,WAAY,SAACH,GAAsB,KAAZA,EAAEI,OAAc,EAAKC,QAAQ,EAAK1B,MAAMC,YAGnE,4BACKQ,KAAKT,MAAME,KAAKyB,KAAI,SAAAb,GACjB,OACI,wBAAIc,IAAKd,EAAKV,IACV,0BAAMY,UAAU,OAAhB,IAAuB,4BAAQA,UAAU,UAAUa,QAAS,kBAAM,EAAKC,WAAWhB,EAAKV,MAAhE,UAAvB,KAECU,EAAKP,iB,GA3DxBwB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2eafa111.chunk.js","sourcesContent":["import React from 'react'; //import react\nimport './App.css'; //import css\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            newItem: \"\",\n            list: []\n        }\n    }\n\n    addToDo(task){\n       if(task !== \"\"){\n           const newItem = {\n               id: Date.now(),\n               value: task,\n               isDone: false\n            };\n            //don't change state item directly\n            const list = [...this.state.list]; //append all item into list\n            list.push(newItem);\n            //now we can update state item using setState \n            this.setState({\n                list,\n                newItem: \"\"\n            });\n       } \n    }\n\n    deleteToDo(id){\n        const list = [...this.state.list];\n        const updatelist = list.filter(item => item.id !== id);\n        this.setState({\n            list: updatelist\n        });\n    }\n\n    updateInput(input){\n        this.setState({\n            newItem: input\n        });\n    }\n    \n    render(){\n        return(\n            <div>\n                <div className=\"container\">\n                    <h1>To-Do List</h1>\n                    <input id=\"new\" type=\"text\" placeholder=\"Add New Todo\"\n                        required \n                        value={this.state.newItem} \n                        onChange={e => this.updateInput(e.target.value)}\n                        onKeyPress={(e) => {if(e.which === 13) this.addToDo(this.state.newItem)}}\n                    />         \n                         \n                    <ul>\n                        {this.state.list.map(item => {\n                            return(\n                                <li key={item.id}>\n                                    <span className=\"del\"> <button className=\"btn-del\" onClick={() => this.deleteToDo(item.id)}>Delete</button> </span>\n                                    {/* <input type=\"checkbox\" name=\"check\" className=\"checker\" checked={item.isDone} /> */}\n                                    {item.value}\n                                </li>\n                            );\n                        })}\n                    </ul>    \n                </div>\n            </div>\n        )\n    }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}